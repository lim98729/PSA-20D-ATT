<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LOG_CLICK_BUTTON" xml:space="preserve">
    <value>[Center Right : {0}] - [Button : {1}] is Clicked (by {2})</value>
  </data>
  <data name="LOG_CLICK_BUTTON_DEFAULT" xml:space="preserve">
    <value>[Button : {0}] is Clicked (by {1})</value>
  </data>
  <data name="LOG_CLICK_BUTTON_IO" xml:space="preserve">
    <value>[I/O Menu : {0}] - [Button : {1}] is Clicked (by {2})</value>
  </data>
  <data name="LOG_CLICK_TAG" xml:space="preserve">
    <value>[Center Right : {0}] - [{1}] is Clicked (by {2})</value>
  </data>
  <data name="LOG_DEBUG_HD_FORCE_TRACKING_INIT" xml:space="preserve">
    <value>Force Offset is too Big, so value is setted '0'</value>
  </data>
  <data name="LOG_DEBUG_PUSHED_BTN" xml:space="preserve">
    <value>{0} Button is Pushed on Panel.</value>
  </data>
  <data name="LOG_DEBUG_SF_READY_DOWN" xml:space="preserve">
    <value>{0} is Moving for Down Position, Because Tube is Empty</value>
  </data>
  <data name="LOG_DEBUG_SF_READY_UP" xml:space="preserve">
    <value>{0} is Moving for Ready Position, Because Tube is Ready</value>
  </data>
  <data name="LOG_ERROR_MPC_FAILED_COPY_FILE" xml:space="preserve">
    <value>Can Not Copy {0} Files From MPC Folder</value>
  </data>
  <data name="LOG_ERROR_PEDESTAL_NOT_READY" xml:space="preserve">
    <value>Pedestal is Not Prepared because Status is Error Condition</value>
  </data>
  <data name="LOG_TRACE_HD_TOOL_FLATNESS" xml:space="preserve">
    <value>Tool Flatness[{0}] - Touch Probe Value : {1} [um]</value>
  </data>
  <data name="LOG_TRACE_HD_TOOL_FLATNESS_RESULT" xml:space="preserve">
    <value>Tool Flatness Max : {0}, Min : {1}, Max Diff : {2} [um]</value>
  </data>
  <data name="LOG_TRACE_PD_FLATNESS" xml:space="preserve">
    <value>Pedestal Flatness[{0}] - Laser Value : {1} (um)</value>
  </data>
  <data name="LOG_TRACE_PD_FLATNESS_RESULT" xml:space="preserve">
    <value>Pedestal Flatness Max : {0}, Min : {1}, Max Diff : {2} [um]</value>
  </data>
  <data name="MB_ETC_COMM_ERROR" xml:space="preserve">
    <value>Commuication Error Occurred : [{0}]</value>
  </data>
  <data name="MB_HD_CYCLE_ATTACH" xml:space="preserve">
    <value>Next : Do Attach</value>
  </data>
  <data name="MB_HD_CYCLE_DOUBLE_DET" xml:space="preserve">
    <value>Next : Check Double Sensor</value>
  </data>
  <data name="MB_HD_CYCLE_ISP_ORIENTATION" xml:space="preserve">
    <value>Next : Check Orientation for PCB</value>
  </data>
  <data name="MB_HD_CYCLE_ISP_TILT" xml:space="preserve">
    <value>Next : Check Tilt Using Laser Sensor</value>
  </data>
  <data name="MB_HD_CYCLE_LOAD_TMS" xml:space="preserve">
    <value>Yes : Use Tray Map Data from Previous Maachine
No: Use Dummy Map Data</value>
  </data>
  <data name="MB_HD_CYCLE_MOVE_PICK" xml:space="preserve">
    <value>Next : Move Pick Up Position
({0} Position)</value>
  </data>
  <data name="MB_HD_CYCLE_MOVE_S2" xml:space="preserve">
    <value>Move 2nd Search Position</value>
  </data>
  <data name="MB_HD_CYCLE_MOVE_STANDBY" xml:space="preserve">
    <value>Move Standby Position</value>
  </data>
  <data name="MB_HD_CYCLE_MOVE_ULC" xml:space="preserve">
    <value>Next : Move Alignment Position for Heat Slug</value>
  </data>
  <data name="MB_HD_CYCLE_NOWASTE" xml:space="preserve">
    <value>Move Alignment Position without</value>
  </data>
  <data name="MB_HD_CYCLE_PCB_ALIGN" xml:space="preserve">
    <value>Next : Move 1st Search Position after Alignment for PCB</value>
  </data>
  <data name="MB_HD_CYCLE_PICK_DOWN" xml:space="preserve">
    <value>Next : Pick Down</value>
  </data>
  <data name="MB_HD_CYCLE_REQ_SF_UP" xml:space="preserve">
    <value>Next : Stack Feeder Up</value>
  </data>
  <data name="MB_HD_CYCLE_SUC_HS" xml:space="preserve">
    <value>Next : Pick Up</value>
  </data>
  <data name="MB_HD_CYCLE_VIB" xml:space="preserve">
    <value>Next : Vibration Mode On</value>
  </data>
  <data name="MB_HD_CYCLE_WASTE" xml:space="preserve">
    <value>Waste Heat Slug?</value>
  </data>
  <data name="MB_SF_TUBE_ERROR" xml:space="preserve">
    <value>Tube is Not Ready.
You Can Activate Tube by Pushing the Magazine Reset Buttons
or Setting Edit Windows for Tube on Software</value>
  </data>
</root>